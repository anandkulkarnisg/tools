#!/bin/bash
# Synopsis : A simple rsync based utility to synchronize onedrive folder from the local folder using a flexible config file.
# Author : Anand Kulkarni

function showProperUsageHelp
{
	echo -e "Usage : $0 [rsync-config-file].The rsync config file is a comma[,] seperated list of variable and value items"
}

if [ "$#" -ne 1 ]; then
	showProperUsageHelp
	echo -e "Exiting with error code 1..."
	exit 1
fi

if [ ! -f ${1} ]; then
	echo -e "Can not find the config file passed as a parameter.Exiting with failure error code 1..."
	exit 1
fi

# Try to import and set the config file variables.
export rsyncConfigFile=$1
# set the config file variables to be used in rest of the code.
for configItem in $(cat ${rsyncConfigFile})
do
  varName=$(echo $configItem|awk -F"|" '{print $1}')
  varValue=$(echo $configItem|awk -F"|" '{print $2}')
  eval "export $varName=$varValue"
done

# Validate if atleast the mandatory config variables are set with some non null values.If any exit with error.
mandatoryConfigVarList="srcFolder destFolder exclusionList"

for configVar in ${mandatoryConfigVarList}
do
	varVal=$(echo ${configVar})
	if [ "${varVal}" = "" ]; then
			echo -e "The variable ${configVar} is not set. This is a mandatory variable that is needed for rsync to work properly."
			echo -e "The mandatory variable list is : ${mandatoryConfigVarList}."
			echo -e "Exiting with error code of failure 1"
			exit 1
	fi
done

# We next build the required command for the execution of the rsync tool.
export rsyncBin="rsync"
if [ "${rsyncSwitches}" = "" ]; then
	export rsyncSwitches="-av"
else
	export rsyncSwitches="-${rsyncSwitches}"
fi

# We next build the required optional parameter of sync type. This is either delta or full.
# delta works faster and synchronizes only those files/folders since last synchronization.Full is slow and scans all the required folders recursively.
# full is recommended only once a while.

if [ "${rsyncType}" = "" ]; then
	export rsyncType="delta"
	echo -e "Defaulting the rsyncType to delta since no config was found.."
fi

# We build the rsync exclusion command line param list here.
export exclusionList=$(echo ${exclusionList}|sed "s/,/ /g")
baseCommand="--exclude='replacePattern'"
for exclusionItem in ${exclusionList}
do
	cmd=$(echo $baseCommand|sed "s/replacePattern/${exclusionItem}/g")
	exclusionSwitches=$(echo $exclusionSwitches $cmd)
done

# We are ready to invoke the final command here.
echo -e "Running the rsync in ${rsyncType} mode..."
rSyncConfigPath="$HOME/.config/rsynconf"

if [ "${rsyncType}" = "full" ]; then
  echo -e "Applying leaf elimination transformation since running in full mode"
  export leafItem=$(basename $destFolder)
  destFolder=$(echo $destFolder | sed "s/$leafItem//g")
  # --delete switch removed since it can knock out destination cloud folders like Documents/Downloads etc.
	finalExecutionCommand="${rsyncBin} ${rsyncSwitches} ${exclusionSwitches} ${srcFolder} ${destFolder}"  # Additional --delete switch to keep source/destination mirrored.
else
	if [ ! -d ${rSyncConfigPath} ]; then
		echo -e "The timestamp config path : ${rSyncConfigPath} not found. Hence Created it.."
		mkdir -p ${rSyncConfigPath}
	fi 
	export whichSyncId=$(echo $1|awk -F"." '{print $1}'|xargs basename)
	export timeStampConf=${rSyncConfigPath}/${whichSyncId}.lastSyncTimeStamp.conf
	if [ -f ${timeStampConf} ]; then
		export lastTimeStampSynced=$(cat ${timeStampConf})
	else
		echo -e "Defaulting sync time range to previous 24 hrs since no config found. Will be creating one now at : ${timeStampConf}"
		lastTimeStampSynced=$(date +'%Y-%m-%d' --date="-1 day");
		lastTimeStampSynced=$(echo ${lastTimeStampSynced}" 00:00:00")
	fi
	currentTimeStamp=$(date +'%Y-%m-%d')
	currentTimeStamp=$(echo ${currentTimeStamp}" 00:00:00")
	echo ${currentTimeStamp}>${timeStampConf}
	finalExecutionCommand="${rsyncBin} ${rsyncSwitches} ${exclusionSwitches} --progress --files-from=<(cd ${srcFolder};find -newermt \"${lastTimeStampSynced}\" -type f | sed \"s/\.\///g\" " 
	finalExecutionCommand=$(echo ${finalExecutionCommand} "| egrep -v \"/.git\/\") ${srcFolder} ${destFolder}")
fi	

echo -e "Will execute the command :---> ${finalExecutionCommand}"
eval ${finalExecutionCommand}
if [ "$?" -eq 0 ]; then
	echo -e "Successfully finished the synchronization. Updating the last finished timestamp to = ${timeStampConf}"
	echo ${currentTimeStamp}>${timeStampConf}
else
	echo -e "There was an issue in running the rsyncTool which exited with returnstatus of non-zero.Please investigate"
	echo -e "Wont be updating the last synced timestamp at ${timeStampConf}.Exiting with failure code 1..."
	exit 1
fi

# Exit with grace of success.
exit 0
