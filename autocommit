#!/bin/bash

# Author : This is an auto commit script for scripted way to automatically commit code to either bitbucket or git without having to use any manual steps.
# Synopsis : A productivity tool to save key strokes and typing.

# First validate if the parameters are proper. Expects two parameters a) The first parameter is either g/b [ stands for git or bitbucket ].
# b) The second parameter is repository name. It then construct an auto commit message and attempts to add existing files recursively, create a commit and do remote push.

function showUsage()
{
  echo -e "Usage : The proper usage is : autocommit [g/b] [repo-name]. g stands for git and b stands for bitbucket"
}

function handleSpecificRepoActions()
{
    repoName=$1
    if [ "$repoName" = "tiddlywiki" ]; then
      $HOME/git/tools/purgeTiddly
    fi
    if [ "$repoName" = "fedoracustomsettings" ]; then
      runStatus=$(cd $HOME/bitbucket/fedoracustomsettings/menulibre;./dosync;echo "menulibre sync done!!")
      echo -e "runStatus :-> $runStatus"
    fi
}

if [ $# -ne 2 ]; then
  showUsage
  echo -e "Exiting with error code 1..."
  exit 1
fi

# Validate the parameters now.
if [ "$1" != "g" -a "$1" != "b" ]; then
  echo -e "The first parameter to script $1 is invalid. It should be either if [g/b].Exiting with error code 1..."
  exit 1
fi

# Validate if the repository exits which is second parameter.
repoType=$(echo $1|sed "s/g/git/g"|sed "s/b/bitbucket/g")
repoName=$2

# Ensure that multiple repository names seperated via pipe are handled.
if [ "$repoName" = "all" ]; then
  if [ "$repoType" = "git" ]; then
    # Derive here the repo names from gdue command.
      repoName=$(dueCommits git due|awk -F":" '{print $2}'|sed "s/ //g"|tr "\n" "|")
  fi
  if [ "$repoType" = "bitbucket" ]; then
    # Derive the repo names from bdue command.
      repoName=$(dueCommits bb due|awk -F":" '{print $2}'|sed "s/ //g"|tr "\n" "|")
  fi
  repoName=${repoName%?}
  repoNameList=$(echo $repoName|tr "|" " ")
else
  repoNameList=$(echo $repoName|tr "|" " ")
fi
cwd=$PWD

# Check if the repo name is empty/null.If so warn and quit.
if [ "$repoNameList" = "" ]; then
  echo -e "No repo names. Hence quitting gracefully."
  exit 0
fi

for repoName in $repoNameList
do
  repoPath=$HOME/$repoType/$repoName
  if [ ! -d $repoPath ]; then
    echo -e "The repository expected is not found at path $repoPath. Please verify..."
    echo -e "Exiting with error code 1..."
  fi
  # Check if a git is clean i.e nothing modified or new added. If so shout and quit here. 
  isGitStatusClean=$(cd $repoPath;git status|tail -1|grep "nothing to commit, working tree clean"|wc -l|sed -e "s/1/y/g;s/0/n/g")
  if [ $isGitStatusClean = "y" ]; then
   echo -e "The git status is completely clean for $repoName.Nothing to do.Skipping this repository!!"
  else
    autocommitmsg="commited via autocommit tool"
    echo "The auto commit message is ---> $autocommitmsg"
    # Action the command now.
    cd $repoPath
    handleSpecificRepoActions $repoName
    git add .
    gcm "$autocommitmsg"    # this commit with proper message and pushes as well.
  fi
done

cd $cwd 

# Exit with grace of success.
exit 0
